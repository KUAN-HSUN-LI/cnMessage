scalar Upload
type Query {
	getMessage(messageBoxId: ID!): [Message!]
	uploads: [File]
}

type Mutation {
	createUser(data: CreateUserInput!): User!
	loginUser(data: LoginUserInput!): User!
	deleteUsers: User
	createFriend(data: CreateFriendInput!): Boolean
	createMessage(data: createMessageInput!): Boolean
	uploadFile(file: Upload!, msgBoxId: ID!, reciever: String!): File!
}

type Subscription {
	message(msgBoxId: ID!): MsgSubscriptionPayload!
	file(msgBoxId: ID!, reciever: String!): FileSubscriptionPayload!
}

type User {
	id: ID!
	name: String!
	friends: [Friend]
}

type Friend {
	name: String!
	messageBox: ID!
}

type Message {
	id: ID!
	author: String!
	body: String!
}

type File {
	filename: String!
	mimetype: String!
	encoding: String!
	stream: String
}

input CreateUserInput {
	name: String!
	pwd: String!
}

input LoginUserInput {
	name: String!
	pwd: String!
}

input CreateFriendInput {
	username: String!
	friendname: String!
}

input createMessageInput {
	messageBoxId: ID!
	author: String!
	body: String!
}

type MsgSubscriptionPayload {
	data: Message!
}

type FileSubscriptionPayload {
	data: File!
}
